// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: athlete/athlete.proto

package atlete

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	AthleteService_CreateAthlete_FullMethodName  = "/AthleteService/CreateAthlete"
	AthleteService_GetbyIdAthlete_FullMethodName = "/AthleteService/GetbyIdAthlete"
	AthleteService_GetAthlete_FullMethodName     = "/AthleteService/GetAthlete"
	AthleteService_UpdateAthlete_FullMethodName  = "/AthleteService/UpdateAthlete"
	AthleteService_DeleteAthlete_FullMethodName  = "/AthleteService/DeleteAthlete"
)

// AthleteServiceClient is the client API for AthleteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AthleteServiceClient interface {
	CreateAthlete(ctx context.Context, in *AthleteRequest, opts ...grpc.CallOption) (*AthleteResponse, error)
	GetbyIdAthlete(ctx context.Context, in *AthleteResponse, opts ...grpc.CallOption) (*Athlete, error)
	GetAthlete(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListAthlete, error)
	UpdateAthlete(ctx context.Context, in *Athlete, opts ...grpc.CallOption) (*Response, error)
	DeleteAthlete(ctx context.Context, in *AthleteResponse, opts ...grpc.CallOption) (*Response, error)
}

type athleteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAthleteServiceClient(cc grpc.ClientConnInterface) AthleteServiceClient {
	return &athleteServiceClient{cc}
}

func (c *athleteServiceClient) CreateAthlete(ctx context.Context, in *AthleteRequest, opts ...grpc.CallOption) (*AthleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AthleteResponse)
	err := c.cc.Invoke(ctx, AthleteService_CreateAthlete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *athleteServiceClient) GetbyIdAthlete(ctx context.Context, in *AthleteResponse, opts ...grpc.CallOption) (*Athlete, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Athlete)
	err := c.cc.Invoke(ctx, AthleteService_GetbyIdAthlete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *athleteServiceClient) GetAthlete(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListAthlete, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAthlete)
	err := c.cc.Invoke(ctx, AthleteService_GetAthlete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *athleteServiceClient) UpdateAthlete(ctx context.Context, in *Athlete, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, AthleteService_UpdateAthlete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *athleteServiceClient) DeleteAthlete(ctx context.Context, in *AthleteResponse, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, AthleteService_DeleteAthlete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AthleteServiceServer is the server API for AthleteService service.
// All implementations must embed UnimplementedAthleteServiceServer
// for forward compatibility
type AthleteServiceServer interface {
	CreateAthlete(context.Context, *AthleteRequest) (*AthleteResponse, error)
	GetbyIdAthlete(context.Context, *AthleteResponse) (*Athlete, error)
	GetAthlete(context.Context, *Empty) (*ListAthlete, error)
	UpdateAthlete(context.Context, *Athlete) (*Response, error)
	DeleteAthlete(context.Context, *AthleteResponse) (*Response, error)
	mustEmbedUnimplementedAthleteServiceServer()
}

// UnimplementedAthleteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAthleteServiceServer struct {
}

func (UnimplementedAthleteServiceServer) CreateAthlete(context.Context, *AthleteRequest) (*AthleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAthlete not implemented")
}
func (UnimplementedAthleteServiceServer) GetbyIdAthlete(context.Context, *AthleteResponse) (*Athlete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetbyIdAthlete not implemented")
}
func (UnimplementedAthleteServiceServer) GetAthlete(context.Context, *Empty) (*ListAthlete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAthlete not implemented")
}
func (UnimplementedAthleteServiceServer) UpdateAthlete(context.Context, *Athlete) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAthlete not implemented")
}
func (UnimplementedAthleteServiceServer) DeleteAthlete(context.Context, *AthleteResponse) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAthlete not implemented")
}
func (UnimplementedAthleteServiceServer) mustEmbedUnimplementedAthleteServiceServer() {}

// UnsafeAthleteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AthleteServiceServer will
// result in compilation errors.
type UnsafeAthleteServiceServer interface {
	mustEmbedUnimplementedAthleteServiceServer()
}

func RegisterAthleteServiceServer(s grpc.ServiceRegistrar, srv AthleteServiceServer) {
	s.RegisterService(&AthleteService_ServiceDesc, srv)
}

func _AthleteService_CreateAthlete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AthleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AthleteServiceServer).CreateAthlete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AthleteService_CreateAthlete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AthleteServiceServer).CreateAthlete(ctx, req.(*AthleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AthleteService_GetbyIdAthlete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AthleteResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AthleteServiceServer).GetbyIdAthlete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AthleteService_GetbyIdAthlete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AthleteServiceServer).GetbyIdAthlete(ctx, req.(*AthleteResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _AthleteService_GetAthlete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AthleteServiceServer).GetAthlete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AthleteService_GetAthlete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AthleteServiceServer).GetAthlete(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AthleteService_UpdateAthlete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Athlete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AthleteServiceServer).UpdateAthlete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AthleteService_UpdateAthlete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AthleteServiceServer).UpdateAthlete(ctx, req.(*Athlete))
	}
	return interceptor(ctx, in, info, handler)
}

func _AthleteService_DeleteAthlete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AthleteResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AthleteServiceServer).DeleteAthlete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AthleteService_DeleteAthlete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AthleteServiceServer).DeleteAthlete(ctx, req.(*AthleteResponse))
	}
	return interceptor(ctx, in, info, handler)
}

// AthleteService_ServiceDesc is the grpc.ServiceDesc for AthleteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AthleteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AthleteService",
	HandlerType: (*AthleteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAthlete",
			Handler:    _AthleteService_CreateAthlete_Handler,
		},
		{
			MethodName: "GetbyIdAthlete",
			Handler:    _AthleteService_GetbyIdAthlete_Handler,
		},
		{
			MethodName: "GetAthlete",
			Handler:    _AthleteService_GetAthlete_Handler,
		},
		{
			MethodName: "UpdateAthlete",
			Handler:    _AthleteService_UpdateAthlete_Handler,
		},
		{
			MethodName: "DeleteAthlete",
			Handler:    _AthleteService_DeleteAthlete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "athlete/athlete.proto",
}
